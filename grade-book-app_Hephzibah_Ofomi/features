class GradeBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Grade Book App")
        self.grade_book = GradeBook()
        
        self.main_menu()

    def main_menu(self):
        menu_frame = tk.Frame(self.root)
        menu_frame.pack()

        tk.Label(menu_frame, text="Grade Book App", font=("Arial", 20)).pack(pady=10)
        tk.Button(menu_frame, text="Add Student", command=self.add_student).pack(pady=5)
        tk.Button(menu_frame, text="Add Course", command=self.add_course).pack(pady=5)
        tk.Button(menu_frame, text="Register Student for Course", command=self.register_student_for_course).pack(pady=5)
        tk.Button(menu_frame, text="Calculate Ranking", command=self.calculate_ranking).pack(pady=5)
        tk.Button(menu_frame, text="Search by Grade", command=self.search_by_grade).pack(pady=5)
        tk.Button(menu_frame, text="Generate Transcript", command=self.generate_transcript).pack(pady=5)
        tk.Button(menu_frame, text="Exit", command=self.root.quit).pack(pady=5)

    def add_student(self):
        email = simpledialog.askstring("Input", "Enter student's email:")
        names = simpledialog.askstring("Input", "Enter student's names:")
        self.grade_book.add_student(email, names)
        messagebox.showinfo("Info", "Student added successfully!")

    def add_course(self):
        name = simpledialog.askstring("Input", "Enter course name:")
        trimester = simpledialog.askstring("Input", "Enter course trimester:")
        credits = simpledialog.askinteger("Input", "Enter course credits:")
        self.grade_book.add_course(name, trimester, credits)
        messagebox.showinfo("Info", "Course added successfully!")

    def register_student_for_course(self):
        student_email = simpledialog.askstring("Input", "Enter student's email:")
        course_name = simpledialog.askstring("Input", "Enter course name:")
        grade = simpledialog.askfloat("Input", "Enter grade:")
        self.grade_book.register_student_for_course(student_email, course_name, grade)
        messagebox.showinfo("Info", "Student registered for course successfully!")

    def calculate_ranking(self):
        ranking = self.grade_book.calculate_ranking()
        ranking_text = "\n".join(f"{i+1}. {s.names} (GPA: {s.GPA:.2f})" for i, s in enumerate(ranking))
        messagebox.showinfo("Ranking", ranking_text)

    def search_by_grade(self):
        min_grade = simpledialog.askfloat("Input", "Enter minimum GPA:")
        max_grade = simpledialog.askfloat("Input", "Enter maximum GPA:")
        students = self.grade_book.search_by_grade(min_grade, max_grade)
        result_text = "\n".join(f"{s.names} (GPA: {s.GPA:.2f})" for s in students)
        messagebox.showinfo("Search by Grade", result_text)

    def generate_transcript(self):
        student_email = simpledialog.askstring("Input", "Enter student's email:")
        transcript = self.grade_book.generate_transcript(student_email)
        if transcript:
            transcript_text = f"Transcript for {transcript['names']}:\nEmail: {transcript['email']}\nGPA: {transcript['GPA']:.2f}\nCourses:\n"
            for course in transcript['courses']:
                transcript_text += f"  {course[0]}: {course[1]:.2f}\n"
            messagebox.showinfo("Transcript", transcript_text)
        else:
            messagebox.showwarning("Warning", "Student not found!")

if __name__ == "__main__":
    root = tk.Tk()
    app = GradeBookApp(root)
    root.mainloop()
